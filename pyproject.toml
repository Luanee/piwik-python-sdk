[tool.poetry]
name = "piwik"
version = "0.1.0"
description = ""
authors = ["Pit Nahrstedt <pit_nahrstedt@web.de>"]
readme = "README.md"
packages = [
    { include = "piwik" },
]

[tool.poetry.dependencies]
python = "^3.10"
pydantic = "^2.8.2"
pydantic-settings = "^2.4.0"
requests = "^2.32.3"
oauthlib = "^3.2.2"
requests-oauthlib = "^2.0.0"
requests-mock = "^1.12.1"


[tool.poetry.group.test.dependencies]
pytest = "^8.3.2"
pytest-cov = "^5.0.0"


[tool.poetry.group.dev.dependencies]
ruff = "^0.6.2"
commitlint = "^1.2.0"
datamodel-code-generator = "^0.25.9"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 120
indent-width = 4

# Assume Python 3.9
target-version = "py39"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.pytest.ini_options]
minversion = "7.0"
python_files = "test_*.py"
addopts = "--cov=piwik --cov-report term-missing"
testpaths = ["tests"]

[tool.pylint.MAIN]
ignore = []
py-version = "^3.10"
extension-pkg-allow-list = "pydantic"

[tool.pylint.format]
max-line-length = 120
disable = [
  "C0114", # (missing-module-docstring)
  "C0115", # (missing-class-docstring)
  "C0116", # (missing-function-docstring)
  "E0611", # (no-name-in-module)
  "R0903", # (too-few-public-methods)
  "R0913", # (too-many-arguments)
  "W1203", # (logging-fstring-interpolation)
  "W0105", # (pointless-string-statement)
  "E0213", # (no-self-argument)
  "W0221", # (arguments-differ)
]


[tool.pylint.BASIC]
good-names = ["i", "j", "k", "x", "y", "df", "db"]


[tool.pylint.LOGGING]
logging-format-style = "new"



[tool.coverage.run]
branch = true
source = ["data_engineering_services", "tests"]
# * Maybee we need this later when we have some fixtures (code that runs at every test but isn't a test)
omit = ["**/*/__init__.py"]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "def __str__",
  "raise AssertionError",
  "raise NotImplementedError",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
  "if typing.TYPE_CHECKING:",
  "class \\w+\\(Protocol\\):"
]
